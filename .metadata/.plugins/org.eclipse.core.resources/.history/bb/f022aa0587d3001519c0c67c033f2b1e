package com.Twomey.TheAlmightyMessenger;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Inet4Address;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class Server extends JFrame{
	
	private static final long serialVersionUID = 1L;
	public static JTextField userText;
	public static JPanel userTextPanel;
	public static JTextArea chatWindow;
	public static JMenuBar menuBar;
	private JMenu fileMenu;
	private JMenu optionsMenu;
	private JMenuItem settingsAction;
	private JMenuItem closeOption;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private ServerSocket server;
	private Socket connection;
	private String publicIp;
	public static String username = "Server";
	
	public Server(){
		super("Server");
		setLookandFeel();
		setSize(420, 275);
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
		userTextPanel = new JPanel();
		
		menuBar = new JMenuBar();
		menuBar.setOpaque(true);
		setJMenuBar(menuBar);
		fileMenu = new JMenu("File");
		menuBar.add(fileMenu);
		closeOption = new JMenuItem("Exit");
		closeOption.addActionListener(
				new ActionListener(){
					public void actionPerformed(ActionEvent event){
						System.exit(0);
					}
				}
			);
		fileMenu.add(closeOption);
		optionsMenu = new JMenu("Options");
		menuBar.add(optionsMenu);
		settingsAction = new JMenuItem("Settings");
		optionsMenu.add(settingsAction);
		settingsAction.addActionListener(
				new ActionListener(){
					public void actionPerformed(ActionEvent event){
						new Settings(true);
					}
				}
			);
		
		userText = new JTextField(34);
		userText.setEditable(false);
		userText.addActionListener(
			new ActionListener(){
				public void actionPerformed(ActionEvent event){
					sendMessage(event.getActionCommand());
					userText.setText("");
				}
			}
		);
		userTextPanel.add(userText);
		add(userTextPanel, BorderLayout.SOUTH);
		
		chatWindow = new JTextArea();
		chatWindow.setEditable(false);
		chatWindow.setLineWrap(true);
		
		add(new JScrollPane(chatWindow), BorderLayout.CENTER);
		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		username = JOptionPane.showInputDialog("Enter your username:");
	}
	
	public void startRunning(){
		try{
			server = new ServerSocket(6789, 100);
			try {
				publicIp = getPublicIp();
			} catch (Exception e) {
				e.printStackTrace();
			}
			while(true){
				try{
					waitForConnection();
					setupStreams();
					whileChatting();
				}catch(EOFException eofException){
					showMessage("\n Server ended the connection! ");
				}finally{
					cleanup();
				}
			}
		}catch(IOException ioException){
			ioException.printStackTrace();
		}
	}
	
	private void waitForConnection() throws IOException{
		showMessage("Waiting for a connection at\nlocal ip: " + Inet4Address.getLocalHost().getHostAddress() + "\npublic ip: " + publicIp + "\n");
		connection = server.accept();
		showMessage(" Now Connected to " + connection.getInetAddress().getHostName());
	}
	
	private void setupStreams() throws IOException{
		output = new ObjectOutputStream(connection.getOutputStream());
		output.flush();
		input = new ObjectInputStream(connection.getInputStream());
		showMessage("\n Streams are now setup! \n");
	}
	
	private void whileChatting() throws IOException{
		String message = " You are now connected! ";
		sendMessage(message);
		ableToType(true);
		do{
			try{
				message = (String) input.readObject();
				showMessage("\n" + message);
			}catch(ClassNotFoundException classNotFoundException){
				showMessage("\n Unknown user text recieved");
			}
			
		}while(!message.equalsIgnoreCase("CLIENT - /END"));
	}
	
	private void cleanup() throws IOException{
		showMessage("\n Closeing connections... \n");
		ableToType(false);
		try{
			output.close();
			input.close();
			connection.close();
		}catch(IOException ioException){
			ioException.printStackTrace();
		}
	}
	
	private void sendMessage(String message){
		try{
			message = CheckEmojis(message);
			System.out.println(message);
			output.writeObject(username + " - " + message);
			output.flush();
			showMessage("\n" + username + " - " + message);
		}catch(IOException ioException){
			chatWindow.append("\n ERROR: Cannot send message!");
		}
	}
	
	private void showMessage(final String text){
		SwingUtilities.invokeLater(
			new Runnable(){
				public void run(){
					chatWindow.append(text);
				}
			}
		);
	}
	
	private void ableToType(final boolean tof){
		SwingUtilities.invokeLater(
			new Runnable(){
				public void run(){
					userText.setEditable(tof);
				}
			}
		);
	}
	
	private void setLookandFeel(){
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}
	}
	
	public static String getPublicIp() throws Exception {
        URL whatismyip = new URL("http://checkip.amazonaws.com");
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(
                    whatismyip.openStream()));
            String ip = in.readLine();
            return ip;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
	
	public String CheckEmojis(String message){
		if(message.equals("/lenny")){
			message = "( ͡° ͜ʖ ͡°)";
		}
		return message;
	}
	
}
